export default class PostgresStore {
    sql;
    tableName;
    constructor(sql, tableName = 'sessions'){
        this.sql = sql;
        this.tableName = tableName;
    }
    async initSessionsTable() {
        await this.sql`create table if not exists ${this.sql(this.tableName)} (id varchar(21) not null primary key, data varchar)`;
    }
    async sessionExists(sessionId) {
        const result = await this.sql`select data from ${this.sql(this.tableName)} where id = ${sessionId}`;
        return result.length > 0 ? true : false;
    }
    async getSessionById(sessionId) {
        const result = await this.sql`select data from ${this.sql(this.tableName)} where id = ${sessionId}`;
        return result.length > 0 ? JSON.parse(result[0].data) : null;
    }
    async createSession(sessionId, initialData) {
        await this.sql`insert into ${this.sql(this.tableName)} (id, data) values (${sessionId}, ${JSON.stringify(initialData)})`;
    }
    async deleteSession(sessionId) {
        await this.sql`delete from ${this.sql(this.tableName)} where id = ${sessionId}`;
    }
    async persistSessionData(sessionId, sessionData) {
        await this.sql`update ${this.sql(this.tableName)} set data = ${JSON.stringify(sessionData)} where id = ${sessionId}`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvb2FrX3Nlc3Npb25zQHY0LjEuOS9zcmMvc3RvcmVzL1Bvc3RncmVzU3RvcmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN0b3JlIGZyb20gJy4vU3RvcmUudHMnXG5pbXBvcnQgeyBTZXNzaW9uRGF0YSB9IGZyb20gJy4uL1Nlc3Npb24udHMnXG5pbXBvcnQgdHlwZSBwb3N0Z3JlcyBmcm9tIFwiaHR0cHM6Ly9kZW5vLmxhbmQveC9wb3N0Z3Jlc2pzQHYzLjIuNC9tb2QuanNcIjtcblxuLy8gZGVuby1saW50LWlnbm9yZSBiYW4tdHlwZXNcbnR5cGUgU1FMRXhlY3V0b3IgPSBwb3N0Z3Jlcy5TcWw8e30+O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3N0Z3Jlc1N0b3JlIGltcGxlbWVudHMgU3RvcmUge1xuICBzcWw6IFNRTEV4ZWN1dG9yXG4gIHRhYmxlTmFtZTogc3RyaW5nXG5cbiAgY29uc3RydWN0b3Ioc3FsOiBTUUxFeGVjdXRvciwgdGFibGVOYW1lID0gJ3Nlc3Npb25zJykge1xuICAgIHRoaXMuc3FsID0gc3FsXG4gICAgdGhpcy50YWJsZU5hbWUgPSB0YWJsZU5hbWVcbiAgfVxuXG4gIGFzeW5jIGluaXRTZXNzaW9uc1RhYmxlKCkge1xuICAgIGF3YWl0IHRoaXMuc3FsYGNyZWF0ZSB0YWJsZSBpZiBub3QgZXhpc3RzICR7dGhpcy5zcWwodGhpcy50YWJsZU5hbWUpfSAoaWQgdmFyY2hhcigyMSkgbm90IG51bGwgcHJpbWFyeSBrZXksIGRhdGEgdmFyY2hhcilgO1xuICB9XG5cbiAgYXN5bmMgc2Vzc2lvbkV4aXN0cyhzZXNzaW9uSWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc3FsYHNlbGVjdCBkYXRhIGZyb20gJHt0aGlzLnNxbCh0aGlzLnRhYmxlTmFtZSl9IHdoZXJlIGlkID0gJHtzZXNzaW9uSWR9YFxuICAgIHJldHVybiByZXN1bHQubGVuZ3RoID4gMCA/IHRydWUgOiBmYWxzZVxuICB9XG5cbiAgYXN5bmMgZ2V0U2Vzc2lvbkJ5SWQoc2Vzc2lvbklkOiBzdHJpbmcpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNxbGBzZWxlY3QgZGF0YSBmcm9tICR7dGhpcy5zcWwodGhpcy50YWJsZU5hbWUpfSB3aGVyZSBpZCA9ICR7c2Vzc2lvbklkfWBcbiAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA+IDAgPyBKU09OLnBhcnNlKHJlc3VsdFswXS5kYXRhKSBhcyBTZXNzaW9uRGF0YSA6IG51bGxcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVNlc3Npb24oc2Vzc2lvbklkIDogc3RyaW5nLCBpbml0aWFsRGF0YSA6IFNlc3Npb25EYXRhKSB7XG4gICAgYXdhaXQgdGhpcy5zcWxgaW5zZXJ0IGludG8gJHt0aGlzLnNxbCh0aGlzLnRhYmxlTmFtZSl9IChpZCwgZGF0YSkgdmFsdWVzICgke3Nlc3Npb25JZH0sICR7SlNPTi5zdHJpbmdpZnkoaW5pdGlhbERhdGEpfSlgXG4gIH1cblxuICBhc3luYyBkZWxldGVTZXNzaW9uKHNlc3Npb25JZDogc3RyaW5nKSB7XG4gICAgYXdhaXQgdGhpcy5zcWxgZGVsZXRlIGZyb20gJHt0aGlzLnNxbCh0aGlzLnRhYmxlTmFtZSl9IHdoZXJlIGlkID0gJHtzZXNzaW9uSWR9YFxuICB9XG5cbiAgYXN5bmMgcGVyc2lzdFNlc3Npb25EYXRhKHNlc3Npb25JZCA6IHN0cmluZywgc2Vzc2lvbkRhdGEgOiBTZXNzaW9uRGF0YSkge1xuICAgIGF3YWl0IHRoaXMuc3FsYHVwZGF0ZSAke3RoaXMuc3FsKHRoaXMudGFibGVOYW1lKX0gc2V0IGRhdGEgPSAke0pTT04uc3RyaW5naWZ5KHNlc3Npb25EYXRhKX0gd2hlcmUgaWQgPSAke3Nlc3Npb25JZH1gXG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxlQUFlLE1BQU07SUFDbkIsSUFBZ0I7SUFDaEIsVUFBaUI7SUFFakIsWUFBWSxHQUFnQixFQUFFLFlBQVksVUFBVSxDQUFFO1FBQ3BELElBQUksQ0FBQyxHQUFHLEdBQUc7UUFDWCxJQUFJLENBQUMsU0FBUyxHQUFHO0lBQ25CO0lBRUEsTUFBTSxvQkFBb0I7UUFDeEIsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLDJCQUEyQixFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxvREFBb0QsQ0FBQztJQUM1SDtJQUVBLE1BQU0sY0FBYyxTQUFpQixFQUFFO1FBQ3JDLE1BQU0sU0FBUyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxVQUFVLENBQUM7UUFDbkcsT0FBTyxPQUFPLE1BQU0sR0FBRyxJQUFJLElBQUksR0FBRyxLQUFLO0lBQ3pDO0lBRUEsTUFBTSxlQUFlLFNBQWlCLEVBQUU7UUFDdEMsTUFBTSxTQUFTLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsQ0FBQztRQUNuRyxPQUFPLE9BQU8sTUFBTSxHQUFHLElBQUksS0FBSyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQW1CLElBQUk7SUFDN0U7SUFFQSxNQUFNLGNBQWMsU0FBa0IsRUFBRSxXQUF5QixFQUFFO1FBQ2pFLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLG9CQUFvQixFQUFFLFVBQVUsRUFBRSxFQUFFLEtBQUssU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzFIO0lBRUEsTUFBTSxjQUFjLFNBQWlCLEVBQUU7UUFDckMsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsQ0FBQztJQUNqRjtJQUVBLE1BQU0sbUJBQW1CLFNBQWtCLEVBQUUsV0FBeUIsRUFBRTtRQUN0RSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxTQUFTLENBQUMsYUFBYSxZQUFZLEVBQUUsVUFBVSxDQUFDO0lBQ3RIO0FBQ0YsQ0FBQyJ9