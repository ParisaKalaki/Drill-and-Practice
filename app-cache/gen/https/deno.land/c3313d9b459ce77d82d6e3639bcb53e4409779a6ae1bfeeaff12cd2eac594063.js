import { encryptCryptoJSAES, decryptCryptoJSAES } from '../crypto.ts';
export default class CookieStore {
    encryptionKey;
    cookieGetOptions;
    cookieSetDeleteOptions;
    sessionDataCookieName;
    constructor(encryptionKey, options){
        this.encryptionKey = encryptionKey;
        this.cookieGetOptions = options?.cookieGetOptions ?? {};
        this.cookieSetDeleteOptions = options?.cookieSetDeleteOptions ?? {};
        this.sessionDataCookieName = options?.sessionDataCookieName ?? 'session_data';
    }
    async getSessionByCtx(ctx) {
        const sessionDataString = await ctx.cookies.get(this.sessionDataCookieName, this.cookieGetOptions);
        if (!sessionDataString) return null;
        try {
            const decryptedCookie = await decryptCryptoJSAES(sessionDataString, this.encryptionKey);
            return JSON.parse(decryptedCookie);
        } catch  {
            return null;
        }
    }
    async createSession(ctx, initialData) {
        const dataString = JSON.stringify(initialData);
        const encryptedCookie = await encryptCryptoJSAES(dataString, this.encryptionKey);
        await ctx.cookies.set(this.sessionDataCookieName, encryptedCookie, this.cookieSetDeleteOptions);
    }
    deleteSession(ctx) {
        ctx.cookies.delete(this.sessionDataCookieName, this.cookieSetDeleteOptions);
    }
    async persistSessionData(ctx, data) {
        const dataString = JSON.stringify(data);
        const encryptedCookie = await encryptCryptoJSAES(dataString, this.encryptionKey);
        await ctx.cookies.set(this.sessionDataCookieName, encryptedCookie, this.cookieSetDeleteOptions);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvb2FrX3Nlc3Npb25zQHY0LjEuOS9zcmMvc3RvcmVzL0Nvb2tpZVN0b3JlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVuY3J5cHRDcnlwdG9KU0FFUywgZGVjcnlwdENyeXB0b0pTQUVTIH0gZnJvbSAnLi4vY3J5cHRvLnRzJztcbmltcG9ydCB0eXBlIHsgQ29udGV4dCwgQ29va2llc0dldE9wdGlvbnMsIENvb2tpZXNTZXREZWxldGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vZGVwcy50cydcbmltcG9ydCB0eXBlIHsgU2Vzc2lvbkRhdGEgfSBmcm9tICcuLi9TZXNzaW9uLnRzJ1xuXG5pbnRlcmZhY2UgQ29va2llU3RvcmVPcHRpb25zIHtcbiAgY29va2llR2V0T3B0aW9ucz86IENvb2tpZXNHZXRPcHRpb25zO1xuICBjb29raWVTZXREZWxldGVPcHRpb25zPzogQ29va2llc1NldERlbGV0ZU9wdGlvbnM7XG4gIHNlc3Npb25EYXRhQ29va2llTmFtZT86IHN0cmluZ1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb29raWVTdG9yZSB7XG4gIGVuY3J5cHRpb25LZXk6IHN0cmluZ1xuXG4gIGNvb2tpZUdldE9wdGlvbnM6IENvb2tpZXNHZXRPcHRpb25zO1xuICBjb29raWVTZXREZWxldGVPcHRpb25zOiBDb29raWVzU2V0RGVsZXRlT3B0aW9ucztcbiAgc2Vzc2lvbkRhdGFDb29raWVOYW1lOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoZW5jcnlwdGlvbktleSA6IHN0cmluZywgb3B0aW9ucz8gOiBDb29raWVTdG9yZU9wdGlvbnMpIHtcbiAgICB0aGlzLmVuY3J5cHRpb25LZXkgPSBlbmNyeXB0aW9uS2V5XG5cbiAgICB0aGlzLmNvb2tpZUdldE9wdGlvbnMgPSBvcHRpb25zPy5jb29raWVHZXRPcHRpb25zID8/IHt9XG4gICAgdGhpcy5jb29raWVTZXREZWxldGVPcHRpb25zID0gb3B0aW9ucz8uY29va2llU2V0RGVsZXRlT3B0aW9ucyA/PyB7fVxuICAgIHRoaXMuc2Vzc2lvbkRhdGFDb29raWVOYW1lID0gb3B0aW9ucz8uc2Vzc2lvbkRhdGFDb29raWVOYW1lID8/ICdzZXNzaW9uX2RhdGEnXG4gIH1cblxuICBhc3luYyBnZXRTZXNzaW9uQnlDdHgoY3R4IDogQ29udGV4dCkgOiBQcm9taXNlPFNlc3Npb25EYXRhIHwgbnVsbD4ge1xuICAgIGNvbnN0IHNlc3Npb25EYXRhU3RyaW5nIDogc3RyaW5nIHwgdW5kZWZpbmVkID0gYXdhaXQgY3R4LmNvb2tpZXMuZ2V0KHRoaXMuc2Vzc2lvbkRhdGFDb29raWVOYW1lLCB0aGlzLmNvb2tpZUdldE9wdGlvbnMpXG5cbiAgICBpZiAoIXNlc3Npb25EYXRhU3RyaW5nKSByZXR1cm4gbnVsbDtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBkZWNyeXB0ZWRDb29raWUgPSBhd2FpdCBkZWNyeXB0Q3J5cHRvSlNBRVMoc2Vzc2lvbkRhdGFTdHJpbmcsIHRoaXMuZW5jcnlwdGlvbktleSlcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKGRlY3J5cHRlZENvb2tpZSlcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gIH1cblxuICBhc3luYyBjcmVhdGVTZXNzaW9uKGN0eCA6IENvbnRleHQsIGluaXRpYWxEYXRhIDogU2Vzc2lvbkRhdGEpIHtcbiAgICBjb25zdCBkYXRhU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoaW5pdGlhbERhdGEpXG5cbiAgICBjb25zdCBlbmNyeXB0ZWRDb29raWUgPSBhd2FpdCBlbmNyeXB0Q3J5cHRvSlNBRVMoZGF0YVN0cmluZywgdGhpcy5lbmNyeXB0aW9uS2V5KVxuICAgIGF3YWl0IGN0eC5jb29raWVzLnNldCh0aGlzLnNlc3Npb25EYXRhQ29va2llTmFtZSwgZW5jcnlwdGVkQ29va2llLCB0aGlzLmNvb2tpZVNldERlbGV0ZU9wdGlvbnMpXG4gIH1cblxuICBkZWxldGVTZXNzaW9uKGN0eCA6IENvbnRleHQpIHtcbiAgICBjdHguY29va2llcy5kZWxldGUodGhpcy5zZXNzaW9uRGF0YUNvb2tpZU5hbWUsIHRoaXMuY29va2llU2V0RGVsZXRlT3B0aW9ucylcbiAgfVxuXG4gIGFzeW5jIHBlcnNpc3RTZXNzaW9uRGF0YShjdHggOiBDb250ZXh0LCBkYXRhIDogU2Vzc2lvbkRhdGEpIHtcbiAgICBjb25zdCBkYXRhU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZGF0YSlcblxuICAgIGNvbnN0IGVuY3J5cHRlZENvb2tpZSA9IGF3YWl0IGVuY3J5cHRDcnlwdG9KU0FFUyhkYXRhU3RyaW5nLCB0aGlzLmVuY3J5cHRpb25LZXkpXG4gICAgYXdhaXQgY3R4LmNvb2tpZXMuc2V0KHRoaXMuc2Vzc2lvbkRhdGFDb29raWVOYW1lLCBlbmNyeXB0ZWRDb29raWUsIHRoaXMuY29va2llU2V0RGVsZXRlT3B0aW9ucylcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsa0JBQWtCLEVBQUUsa0JBQWtCLFFBQVEsZUFBZTtBQVV0RSxlQUFlLE1BQU07SUFDbkIsY0FBcUI7SUFFckIsaUJBQW9DO0lBQ3BDLHVCQUFnRDtJQUNoRCxzQkFBOEI7SUFFOUIsWUFBWSxhQUFzQixFQUFFLE9BQTZCLENBQUU7UUFDakUsSUFBSSxDQUFDLGFBQWEsR0FBRztRQUVyQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsU0FBUyxvQkFBb0IsQ0FBQztRQUN0RCxJQUFJLENBQUMsc0JBQXNCLEdBQUcsU0FBUywwQkFBMEIsQ0FBQztRQUNsRSxJQUFJLENBQUMscUJBQXFCLEdBQUcsU0FBUyx5QkFBeUI7SUFDakU7SUFFQSxNQUFNLGdCQUFnQixHQUFhLEVBQWdDO1FBQ2pFLE1BQU0sb0JBQXlDLE1BQU0sSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1FBRXRILElBQUksQ0FBQyxtQkFBbUIsT0FBTyxJQUFJO1FBRW5DLElBQUk7WUFDRixNQUFNLGtCQUFrQixNQUFNLG1CQUFtQixtQkFBbUIsSUFBSSxDQUFDLGFBQWE7WUFDdEYsT0FBTyxLQUFLLEtBQUssQ0FBQztRQUNwQixFQUFFLE9BQU07WUFDTixPQUFPLElBQUk7UUFDYjtJQUVGO0lBRUEsTUFBTSxjQUFjLEdBQWEsRUFBRSxXQUF5QixFQUFFO1FBQzVELE1BQU0sYUFBYSxLQUFLLFNBQVMsQ0FBQztRQUVsQyxNQUFNLGtCQUFrQixNQUFNLG1CQUFtQixZQUFZLElBQUksQ0FBQyxhQUFhO1FBQy9FLE1BQU0sSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxpQkFBaUIsSUFBSSxDQUFDLHNCQUFzQjtJQUNoRztJQUVBLGNBQWMsR0FBYSxFQUFFO1FBQzNCLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsSUFBSSxDQUFDLHNCQUFzQjtJQUM1RTtJQUVBLE1BQU0sbUJBQW1CLEdBQWEsRUFBRSxJQUFrQixFQUFFO1FBQzFELE1BQU0sYUFBYSxLQUFLLFNBQVMsQ0FBQztRQUVsQyxNQUFNLGtCQUFrQixNQUFNLG1CQUFtQixZQUFZLElBQUksQ0FBQyxhQUFhO1FBQy9FLE1BQU0sSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxpQkFBaUIsSUFBSSxDQUFDLHNCQUFzQjtJQUNoRztBQUNGLENBQUMifQ==